// question: 0  name: Switch category to $course$/top/課題_DS1-7_アルゴリズム基礎
$CATEGORY: $course$/top/課題_DS1-7_アルゴリズム基礎

//
// データサイエンス(DS)基礎(T)
// 7. アルゴリズム基礎 CBT多肢選択式課題 (GIFTフォーマット)
// ver.2025.7.7


// 説明スライド: P3 アルゴリズムの定義
::Q1.1 アルゴリズムの定義::
アルゴリズムの特徴として正しいものはどれか？{
=曖昧さがなく明確な手順で構成されている
~直感的な理解に依存する
~機械学習モデルと同義である
~必ず自然言語で記述される
}

// 説明スライド: P4 フローチャートの利点と限界
::Q1.2 フローチャートの特徴::
フローチャートの特徴として不適切なものはどれか？{
=詳細なアルゴリズムの動作記述に適している
~処理の流れを視覚的に把握しやすい
~条件分岐やループ処理を示す記号がある
~構造化された手続き表現が可能である
}


// 説明スライド: P5 擬似言語
::Q1.3 擬似言語の用途::
擬似言語（pseudocode）の利点として最も適切なものはどれか？{
=構造化された制御構造が明確に表現できる
~自然言語に近いため曖昧な指示ができる
~図的な処理表現が得意である
~特定のプログラミング言語に依存する
}

// 説明スライド: P6 擬似コードの構文
::Q1.4 順次処理の例::
[html]以下の擬似コードで行われる処理として正しいものはどれか？<br>
<hr>
<pre>
a ← 10
b ← 20
c ← a + b
print c
</pre>
<hr>{
=a, b の順に値を入力し、それらを加算する
~a に 1 を加え続けてループする
~a と b の大小を比較して大きい方を出力する
~a, b を乗算して出力する
}

// 説明スライド: P7 条件分岐の擬似コード
::Q1.5 条件分岐構文::
[html]次の擬似コードにおいて、if 文が実行される条件はどれか？<br>
<hr>
<pre>
x ← 5
if x > 0 then
    print "Positive"
else
    print "Non-positive"
end
</pre>
<hr>{
=変数 x が 0 より大きいとき
~x が負の値であるとき
~x が偶数であるとき
~x がゼロのとき
}

// 説明スライド: P7 for文の構文
::Q1.6 繰返し構文（for）::
[html]以下の for 文の繰り返し回数として正しいものはどれか？<pre>
<hr>
<pre>
for i ← 1 to 10 do
    print i
end
</pre>
<hr>{
=10回
~5回
~11回
~無限回
}

// 説明スライド: P9 最大値探索
::Q1.7 最大値探索の基本::
最大値探索アルゴリズムの処理手順として正しいものは？{
=配列を1つずつ確認し、最大値を更新していく
~配列を昇順にソートして最後の要素を取得する
~全ての要素を乗算して最大値と比較する
~2分探索法で最大値を探索する
}

// 説明スライド: P10 線形探索
::Q1.8 線形探索の特徴::
線形探索に関する記述のうち正しいものはどれか？{
=要素を先頭から順に調べる
~配列がソートされていなければならない
~探索対象を2分割しながら調査する
~ハッシュ関数を利用して高速化する
}

// 説明スライド: P11 バブルソート
::Q1.9 バブルソートの手順::
バブルソートにおいて隣接要素の比較は何の目的で行われるか？{
=値を交換して大きい要素を右に移動させる
~順序を保持したまま逆順にする
~探索対象を二分する
~合計値を求める
}

// 説明スライド: P12 バブルソートのオーダー
::Q1.10 バブルソートの計算量::
バブルソートの最悪時計算量は？{
=O(N^2)
~O(N)
~O(log N)
~O(1)
}

// 説明スライド: P3 アルゴリズムの構成要素
::Q1.11 入力と出力の区別::
アルゴリズムの「出力」として正しいものはどれか？{
=処理の結果として得られる値
~処理途中で使われる変数
~ユーザーの入力手順
~変数の宣言部分
}

// 説明スライド: P8 擬似コードにおけるコメント
::Q1.12 コメントの役割::
擬似コードにおけるコメントの用途として適切なものは？{
=人間がコードの意図を理解しやすくするため
~処理をスキップさせるため
~アルゴリズムの速度を上げるため
~バグを修正するために自動生成されるため
}

// 説明スライド: P7 while構文
::Q1.13 while文の利用場面::
while 文を使用するのに最も適した状況はどれか？{
=繰り返し回数があらかじめ定まっていないとき
~繰り返し回数が決まっているとき
~一度だけ処理したいとき
~ループの終了条件が必要ないとき
}

// 説明スライド: P6 順次処理
::Q1.14 処理順の理解::
順次処理において、命令の実行順が重要な理由は何か？{
=処理の結果が順番に依存するため
~ループの回数が変動するため
~計算量を一定に保つため
~並列処理を避けるため
}

// 説明スライド: P9～P11 アルゴリズム例
::Q1.15 アルゴリズムの例選択::
次のうち、アルゴリズムの例として適切なものはどれか？{
=最大値を求める手順
~画像の主観的評価
~文章の主題の推測
~ユーザーインタフェースの設計
}

// 説明スライド: P13 時間計算量
::Q1.16 時間計算量の意味::
時間計算量とは何を表すか？{
=入力サイズに対して処理にかかる時間の増加度合い
~メモリの使用量
~処理の正確さ
~コードの簡潔さ
}

// 説明スライド: P13 オーダーの種類
::Q1.17 O(1)の処理例::
次のうち、O(1) に該当する処理はどれか？{
=配列の特定のインデックスへのアクセス
~配列全体を合計する処理
~ソート処理
~探索処理
}

// 説明スライド: P14 バブルソートの計算量
::Q1.18 O(N^2)の処理::
バブルソートが O(N^2) である理由として最も適切なものは？{
=すべての隣接要素に対して繰り返し比較を行うから
~再帰的に呼び出す処理があるから
~分割と統合を繰り返すから
~常に一方向だけに処理が進むから
}

// 説明スライド: P2 情報処理の基盤
::Q1.19 アルゴリズムとデータ構造::
アルゴリズムと共に重要な要素として取り上げられるものは何か？{
=データ構造
~ユーザーインターフェース
~通信プロトコル
~自然言語処理
}

// 説明スライド: P11 バブルソートの実行例
::Q1.20 実行回数の予測::
要素数Nの配列に対してバブルソートを実行した場合の比較回数の上限は？{
=N*(N-1)/2
~N^2/2
~N log N
~N^2+N
}

// 説明スライド: P6～P8 擬似コード構文
::Q1.21 擬似コードの誤り検出::
[html]次の擬似コードを実行した場合に、表示されるものとして正しいものはどれか？<br>
<hr>
<pre>
a ← 10  
b ← 20  
if a > b then  
    print a  
else  
    print b  
end  
</pre>
<hr>{
=20が表示される
~10が表示される
~30が表示される
~何も表示されない
}

// 説明スライド: P7 制御構造
::Q1.22 制御構造の理解::
次のうち、基本的な制御構造に含まれないものはどれか？{
=中断処理（break以外）
~順次処理
~分岐処理
~繰り返し処理
}

// 説明スライド: 補足：線形探索との違い
::Q1.23 二分探索の前提条件::
二分探索アルゴリズムを適用する前提条件として最も重要なものはどれか？{
=データが昇順または降順にソートされていること
~データがランダムに並んでいること
~探索対象が中央付近にあること
~データの個数が偶数であること
}

// 説明スライド: P13～P14 計算量比較
::Q1.24 時間計算量の比較::
次のうち、最も処理時間が早くなる可能性が高いアルゴリズムはどれか？{
=O(log N)
~O(N)
~O(N log N)
~O(N^2)
}

// 説明スライド: P14 時間と空間のトレードオフ
::Q1.25 メモリ使用量の観点::
時間計算量が小さくても、不効率なアルゴリズムとされる条件として適切なものはどれか？{
=使用メモリ量（空間計算量）が極端に多い
~処理速度が均一である
~結果が常にランダムに変わる
~条件分岐が1つしかない
}

// 説明スライド: P10 線形探索
::Q1.26 探索アルゴリズムの適用判断::
線形探索が有利でない状況はどれか？{
=データがソートされていない
~データ件数が非常に多い
~探索対象が決まっている
~探索結果を複数件出力したいとき
}

// 説明スライド: P7 擬似コードの実行理解
::Q1.27 擬似コードの実行結果::
[html]次の擬似コードを実行した結果は何か？<br>
<hr>
<pre>
a ← 3  
b ← 5  
if a * b > 10 then  
    print "Yes"  
else  
    print "No"  
end  
</pre>
<hr>{
=Yesが表示される
~Noが表示される
~Errorが表示される
~何も表示されない
}

// 説明スライド: P4 フローチャート構成
::Q1.28 フローチャート記号の意味::
フローチャートにおける「ひし形（◇）」記号の意味として正しいものは？{
=条件判断
~処理の開始
~データ入力
~ループ制御
}

// 説明スライド: P5 擬似言語とその目的
::Q1.29 擬似言語と実装言語の違い::
擬似言語と実装言語の違いとして適切な説明はどれか？{
=擬似言語は実行不可だが論理構造を表現できる
~擬似言語は機械語で記述される
~擬似言語はOS依存である
~擬似言語は動的型付けのみ可能である
}

// 説明スライド: P6 順次処理と変数宣言
::Q1.30 変数の初期化::
アルゴリズムにおいて変数を初期化する目的はどれか？{
=意図した初期状態から処理を正しく行うため
~ランダムに値を生成するため
~出力内容を省略するため
~関数の定義をスキップするため
}